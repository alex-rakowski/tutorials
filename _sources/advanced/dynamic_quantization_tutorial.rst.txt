
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'black' b'@-@' b'explosive' b'band' b'aboard' b'Bergen' b'@-@' b'Herbert' b'(' b'stopping' b'line' b'<unk>' b')' b',' b'Director' b'Howard' b'(' b'<unk>' b'<unk>' b')'
    b',' b'Fires' b'O' b'Bang' b'(' b'1896' b')' b',' b'tissue' b'and' b'Hood' b'for' b'semen' b'three' b'times' b',' b'the' b'first' b'driving' b'to'
    b'be' b'the' b'true' b'unreleased' b'emits' b'(' b'<unk>' b'@-@' b'oz' b')' b',' b'and' b'Edward' b'owner' b'@-@' b'The' b'@-@' b'Western' b'/' b'B'
    b')' b',' b'William' b'Boulez' b',' b'kakapo' b'and' b'consolidation' b'Kowalski' b'.' b'Germany' b'has' b'failed' b'to' b'play' b'in' b'the' b'feud' b'over' b'scoring'
    b'arm' b'and' b'Jay' b'J.' b'Carpenter' b'<unk>' b'.' b'He' b'sat' b'around' b'New' b'York' b'City' b'during' b'1985' b',' b'a' b'cabin' b'of' b'partial'
    b'American' b',' b'<unk>' b',' b'constructive' b',' b'415' b'Platoon' b',' b'H.' b'<unk>' b'(' b'died' b'9' b'%' b'of' b'7' b'@.@' b'3' b'brick'
    b')' b',' b'about' b'19' b'@.@' b'5' b'%' b'of' b'48' b'in' b'(' b'<unk>' b')' b'at' b'White' b'Massive' b',' b'have' b'disappeared' b'his'
    b'recent' b'repelled' b'support' b',' b'and' b'1605' b'levees' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'The' b'Russian' b'botanist' b'Candy' b'of' b'Dublin' b'(' b'World'
    b'War' b')' b'=' b'<eos>' b'<eos>' b'The' b'1986' b'<unk>' b'football' b'season' b'of' b'her' b'"' b'is' b'an' b'trustees' b'of' b'spirituality' b'in' b'this'
    b'book' b'department' b',' b'August' b'30' b'.' b'His' b'boyfriend' b'is' b'generally' b'a' b'cool' b'riff' b'based' b'on' b'190' b'@.@' b'25' b'in' b'('
    b'47th' b'December' b')' b'and' b'was' b'Gloucestershire' b'by' b'evolved' b'to' b'expand' b'a' b'planet' b'for' b'several' b'months' b'for' b'venom' b'.' b'invasions' b'on'
    b'the' b'character' b'was' b'slightly' b'composed' b'into' b'the' b'most' b'controversial' b'remains' b'of' b'Ceres' b'Squadron' b'.' b'Over' b'<unk>' b'failure' b',' b'he' b'<unk>'
    b'the' b'its' b'<unk>' b'with' b'a' b'sitter' b'of' b'God' b'.' b'The' b'brow' b'Mariah' b'The' b'Church' b'of' b'Boston' b'contest' b'is' b'employed' b'on'
    b'a' b'side' b'of' b'Bypass' b',' b'containing' b'conclusion' b'@-@' b'or' b'@-@' b'interact' b'rigged' b'Miranda' b"'t" b'be' b'based' b'on' b'everyday' b'languages' b';'
    b'from' b'which' b'stars' b',' b'well' b',' b'there' b'is' b'three' b'windows' b'very' b'more' b'attractive' b'to' b'yield' b'at' b'the' b'same' b'village' b'.'
    b'Most' b'other' b'proteins' b'find' b'drake' b'or' b'even' b'exposed' b'to' b'intermittent' b'fielders' b',' b'to' b'reflect' b'each' b'@-@' b'male' b'or' b'<unk>' b'Psittacosauridae'
    b'for' b'C' b',' b'and' b'at' b'Walpole' b"'s" b'Dominican' b'Parliament' b',' b'on' b'jumping' b'revoked' b'.' b'Within' b'example' b'between' b'his' b'ribosome' b','
    b'each' b'team' b',' b'then' b'Marvel' b'.' b'New' b'Jersey' b'revealed' b'while' b'when' b'he' b'is' b'coined' b'.' b'He' b'lists' b'literary' b'rules' b'as'
    b'The' b'head' b'of' b'a' b'distinct' b'and' b'spokesperson' b',' b'and' b'their' b'characters' b'pursued' b'an' b'call' b'of' b'wood' b',' b'although' b'an' b'eye'
    b'that' b'made' b'Sky' b'(' b'royalty' b')' b'.' b'<eos>' b'<unk>' b'their' b'fifteen' b'thousand' b'<unk>' b'tall' b'school' b'from' b'a' b'variety' b'of' b'iconography'
    b'varied' b'in' b'two' b'awaits' b'times' b'.' b'Where' b'basement' b',' b'each' b'other' b'organized' b'B' b'false' b'activity' b',' b'air' b',' b'but' b'tied'
    b'with' b'the' b'\xe2\x80\x98' b'<unk>' b',' b'which' b'was' b'Noted' b'by' b'greater' b'phosphors' b'from' b'Souvenirs' b',' b'and' b'called' b'to' b'submit' b'Scully' b"'s"
    b'length' b'.' b'The' b'needle' b'was' b'still' b'stipe' b'on' b'drug' b'works' b',' b'to' b'the' b'possibility' b'above' b'him' b'die' b'after' b'this' b'name'
    b'of' b'the' b'house' b'.' b'Newsweek' b':' b'anthropology' b'<unk>' b'<unk>' b'is' b'a' b'philosopher' b'computer' b',' b'and' b'a' b'foul' b'the' b'pale' b'taste'
    b'is' b'called' b'by' b'Nazi' b'Pleasure' b'at' b'the' b'back' b'or' b'Heidelberg' b'got' b'.' b'Quite' b'that' b'has' b'no' b'message' b'to' b'but' b'very'
    b'apparent' b',' b'they' b'<unk>' b'external' b'and' b'felt' b'Anthony' b',' b'after' b'they' b'think' b'"' b'"' b'besides' b'of' b'[' b'ingestion' b']' b'101'
    b'"' b',' b'but' b'that' b'he' b'may' b'do' b'so' b'flawed' b'emetic' b'at' b'a' b'one' b'@-@' b'month' b'track' b'.' b'The' b'man' b'therefore'
    b'has' b'mound' b'to' b'be' b'anti' b'@-@' b'thirds' b'of' b'39' b'%' b'of' b'his' b'works' b'.' b'This' b'learned' b'included' b'owing' b'to' b'her'
    b'only' b'foreigners' b'.' b'<unk>' b'a' b'small' b'figure' b'to' b'avoid' b'that' b'over' b'@-@' b'resolution' b'@-@' b'shaped' b'Final' b'.' b'Symptoms' b'consistently' b'act'
    b'on' b'<unk>' b'against' b'<unk>' b'(' b'<unk>' b'<unk>' b')' b'.' b'Since' b'not' b'other' b'head' b'expression' b'intense' b'shaped' b',' b'the' b'male' b'uses'
    b'women' b'with' b'genre' b',' b'usual' b'<unk>' b'using' b'other' b'geographically' b'\xe2\x80\x94' b'taking' b'reading' b'him' b'a' b'mini' b'@-@' b'host' b',' b'bas' b'unique'
    b',' b'and' b'involve' b'.' b'The' b'poetic' b'characters' b'of' b'one' b'hand' b'for' b'Because' b'point' b'.' b'The' b'wood' b'dispute' b'on' b'a' b'bush'
    b',' b'then' b'a' b'feathers' b'facing' b'them' b',' b'from' b'wet' b',' b'and' b'even' b'often' b'expands' b'when' b'any' b'hormones' b'represents' b'Marco' b'respects'
    b'they' b'signal' b'the' b'one' b'of' b'which' b'they' b'left' b'when' b'they' b'grazing' b'it' b'other' b'.' b'Finally' b',' b'they' b'do' b'find' b'them'
    b'to' b'seal' b'and' b'kill' b'physics' b'and' b'prefer' b'support' b'.' b'(' b'tiny' b'see' b'the' b'daunting' b'and' b'disc' b')' b'are' b'apparent' b'that'
    b'their' b'threat' b'is' b'highly' b'innovative' b'.' b'Meanwhile' b',' b'secluded' b',' b'it' b'riding' b'flu' b'and' b'so' b'sometimes' b'partially' b'known' b'for' b'<unk>'
    b',' b'they' b'tightly' b'fates' b'.' b'it' b'is' b'males' b'that' b'in' b'contrast' b'are' b'killed' b'or' b',' b'they' b'eat' b'them' b'.' b'If'
    b'they' b'contains' b'them' b'away' b',' b'they' b'have' b'capped' b'it' b'about' b'.' b'It' b'will' b'act' b'to' b'mirror' b'when' b'noise' b'said' b'it'
    b'seems' b'in' b'the' b'mind' b'two' b'times' b'"' b'.' b'The' b'novelization' b'usually' b'act' b'place' b'and' b'produced' b'a' b'$' b'55' b'million' b'species'
    b',' b'the' b'aspect' b'of' b'pre' b'@-@' b'button' b'and' b'thirty' b'@-@' b'changes' b'a' b'certain' b'bird' b',' b'which' b'was' b'also' b'brilliant' b'at'
    b'India' b'for' b'the' b'world' b'.' b'It' b'is' b'as' b'god' b'of' b'Fuel' b'composer' b"'s" b'behaviour' b'(' b'Tomasevich' b')' b'perform' b'idols' b'"'
    b'like' b'no' b'dead' b'exaggerated' b'"' b'.' b'His' b'finds' b'are' b'good' b'or' b'Hebrew' b',' b'but' b'there' b'are' b'no' b'variable' b',' b'striking'
    b'enzymes' b'economies' b'for' b'natural' b'effect' b'.' b'Its' b'inevitable' b'jazz' b'resemble' b',' b'yellow' b'Patents' b',' b'is' b'normally' b'always' b'Function' b'of' b'their'
    b'parents' b'rather' b'than' b'head' b'bird' b'.' b'But' b'they' b'recovered' b'near' b'some' b'produce' b'<unk>' b',' b'it' b'I' b'do' b'not' b'run' b'art'
    b'as' b',' b'they' b"'re" b'often' b'capable' b'of' b'"' b'em' b'a' b'whole' b'form' b'"' b',' b'by' b'km2' b'absolutely' b'that' b'.' b'This'
    b'path' b'is' b'today' b'expensive' b'when' b'he' b'lent' b'it' b'difficult' b'may' b'pass' b'sudden' b'directly' b'.' b'The' b'more' b'important' b'cause' b'of' b'All\xc4\x81h'
    b'is' b'located' b'.' b'Mhalsa' b"'" b'fourth' b'name' b'can' b'be' b'killed' b',' b'that' b'Celtic' b'producers' b'high' b'rainforests' b'island' b'Oribe' b',' b'which'
    b'are' b'distinctive' b'.' b'Though' b'they' b'Indu' b'rarely' b'involved' b'Manual' b',' b'consider' b'her' b'able' b';' b'they' b'did' b'mostly' b'cut' b'to' b'any'
    b'other' b'cross' b'practice' b',' b'so' b'Draftees' b'are' b'defeated' b'.' b'"' b'Days' b'"' b'has' b'been' b'Confederates' b'to' b'ensure' b'that' b'their' b'ongoing'
    b'films' b'were' b'discovered' b'.' b'In' b'2007' b',' b'they' b'may' b'be' b'known' b'to' b'start' b'children' b'in' b'the' b'1986' b'process' b'.' b'The'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 234.5
    loss: 5.168
    elapsed time (seconds): 127.8




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  11.466 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

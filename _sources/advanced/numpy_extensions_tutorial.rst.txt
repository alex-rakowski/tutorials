
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[11.7014,  4.8792,  7.3492, 13.4554,  7.9243],
            [ 3.5378, 12.1096,  2.7411,  3.5737,  3.0598],
            [ 4.0355,  4.9047, 14.6050,  9.4764, 13.5518],
            [ 4.9497,  6.0916,  8.9187,  9.3149,  5.6109],
            [13.4399,  2.3640,  5.6507, 11.6031, 15.8042],
            [ 4.9497,  2.0823,  8.6417,  7.1596,  5.6109],
            [ 4.0355,  2.0294,  6.4236,  3.6823, 13.5518],
            [ 3.5378, 12.2087,  5.5625,  6.4850,  3.0598]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9502, -0.5737,  0.0393, -1.1397,  0.0271,  0.5554, -1.0838, -1.5528],
            [ 0.8274,  0.5934,  0.3928,  0.0148, -0.4914,  1.2989, -1.5932, -0.1334],
            [-0.7590, -0.8249, -0.4955, -1.1585,  0.3759, -0.8759,  0.7679,  0.9020],
            [ 0.4236, -1.7178,  0.8766, -0.9428, -1.2285,  1.5149,  1.2481, -0.9558],
            [-0.0078, -0.5180,  0.6676, -2.4760,  0.5209,  0.3940,  0.2358, -0.5020],
            [ 0.7460, -0.1858, -0.4360,  1.0494, -0.7567,  1.4479, -2.3546,  0.8824],
            [-0.9195, -0.3331,  1.8852, -0.9180, -1.9820, -1.6777, -0.5754, -1.5186],
            [ 1.2299,  0.7613,  0.0717,  0.8351, -0.4495, -1.1319, -0.0415, -0.9260]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4662,  0.7379,  0.1465],
            [ 1.2715, -1.2886, -0.1383],
            [ 0.6287, -0.7730, -0.5562]], requires_grad=True), Parameter containing:
    tensor([[0.0179]], requires_grad=True)]
    Output from the convolution:  tensor([[ 9.0619e-01,  2.2378e+00,  3.3373e+00, -1.8782e+00, -2.0986e+00,
             -3.4314e+00,  3.0543e+00,  1.2007e+00],
            [ 9.7671e-01,  2.7184e-01, -7.7528e-02, -6.5349e+00,  7.4688e-01,
             -6.4665e-01,  2.0007e+00, -1.2364e+00],
            [ 3.2325e+00, -2.9727e+00, -2.6767e+00,  2.5672e+00,  1.9693e-01,
              7.3623e+00, -4.6866e+00, -1.8736e-01],
            [-1.4492e+00, -1.1504e+00, -2.5703e+00,  2.2190e+00,  9.3792e-01,
              5.3554e-03, -1.7124e+00, -1.1909e+00],
            [ 1.3758e+00,  2.6517e+00, -1.5320e+00,  1.4490e+00,  2.6014e+00,
             -3.9064e+00, -2.3991e+00, -2.8442e+00],
            [-3.4474e-01,  4.8571e-01, -3.3753e+00,  1.9563e+00,  1.4366e+00,
             -3.6199e+00, -7.6120e-01, -3.2701e+00],
            [ 1.0341e+00, -4.6842e-01, -1.3791e+00, -2.5873e+00, -6.0550e-01,
              3.8263e-01,  2.1901e-01,  3.4470e-01],
            [ 1.7786e+00, -3.4305e+00,  1.9449e+00,  2.3804e+00, -6.7904e-01,
              1.0119e+00,  8.3483e-01, -3.2520e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5390, -0.7589,  0.0605,  0.5539,  0.2579, -0.0309, -0.0351, -0.4154,
              0.5420,  0.1484],
            [-1.7548,  1.7613,  1.1152,  1.1083, -2.6229,  2.4501, -3.6876,  1.4033,
             -1.5104, -0.1589],
            [-1.9375,  1.9390, -1.0846, -3.7756, -1.7872,  0.1730, -4.0573,  3.3309,
             -0.0966, -0.6528],
            [-1.6383,  0.8652,  0.0398, -1.3015,  1.7946,  1.8350, -2.9159, -0.3775,
              0.8385, -0.1079],
            [-1.6272, -0.9186,  1.5345, -0.3198, -0.2366,  1.1050,  3.0380, -1.7717,
              3.2754,  0.6582],
            [-3.1334,  2.3163, -0.8781,  1.4921, -3.4271, -1.6788,  4.0777, -4.5506,
              1.0439,  1.1008],
            [-2.4522,  4.9355,  0.6841, -3.1424, -0.6915,  3.8228, -1.5007, -0.2406,
             -0.1285,  0.2839],
            [ 0.2172, -2.1113,  2.5061, -1.9326, -1.2782,  5.0327, -3.7431,  4.3969,
             -1.3222, -0.2998],
            [-0.7903,  0.9713, -0.8385,  0.3747,  0.0058, -0.6065, -0.0690,  2.3331,
             -0.7939, -0.9988],
            [-0.8332,  1.4448,  0.2225, -0.3128,  0.2286, -0.9685,  0.3316,  0.6737,
             -0.1109, -0.1154]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.068 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 2.5526,  1.9697,  8.4119,  8.4461,  8.7145],
            [ 1.8596,  2.5649, 12.1154, 12.9785,  6.2807],
            [10.8624,  2.6750, 14.6198,  7.7387, 10.7729],
            [ 5.3304, 10.6752,  9.3674,  8.6102,  7.4255],
            [ 7.7584,  1.2026,  1.9125,  7.8179,  9.0901],
            [ 5.3304,  8.5789,  0.5031,  2.0797,  7.4255],
            [10.8624,  3.1314,  4.1615,  3.5992, 10.7729],
            [ 1.8596,  5.6626,  3.2356,  5.6877,  6.2807]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7114,  0.5349, -0.9660, -0.0191, -0.1364, -0.5032, -2.9745,  1.2830],
            [-0.7251,  0.1711, -0.4644,  0.3119, -0.7284, -1.5577,  1.1986, -0.2305],
            [-0.5282,  0.3019,  0.6599, -1.1136, -0.2574,  1.4883,  0.9272, -0.6501],
            [ 0.0672,  1.7562, -0.5360,  0.6749,  0.5582,  0.9504, -0.9706, -1.3108],
            [ 0.6027, -0.6625, -1.2608, -0.9823, -0.0353,  1.2009, -0.9812,  0.0167],
            [ 0.5150, -0.3989, -0.1116, -1.6007,  0.9914, -0.3098,  0.0399, -0.3156],
            [ 0.0130, -0.1395,  1.0411,  0.2918, -1.0154,  0.1446, -1.4063,  0.6815],
            [ 0.4022,  0.1584,  1.0001, -0.8373,  0.4131,  1.9638, -0.2542,  1.7822]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6549,  0.6813, -0.6787],
            [ 1.4051, -1.5080, -0.8232],
            [-0.6053, -0.8310,  1.0229]], requires_grad=True), Parameter containing:
    tensor([[-0.4529]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.8594,  0.6899, -2.9003,  1.1324,  0.4966,  2.0986,  0.4945, -2.9364],
            [ 0.6695, -2.8287, -0.7117,  6.9145, -1.9081, -1.5166, -2.3544,  1.0048],
            [-0.8401, -0.8749,  5.8414, -2.5211, -5.3798,  3.1960, -1.3197,  3.3061],
            [ 5.4150,  1.2388,  0.3502, -8.8817,  2.8315, -1.5355, -0.1183,  1.7699],
            [-0.0877, -4.9812, -0.0112,  0.4592,  1.5523, -1.4534,  1.4976, -3.3506],
            [-1.9023,  2.1970,  3.3650, -1.5199,  1.5340,  0.7970,  0.1633, -3.4450],
            [-1.9574,  1.2428, -1.9193,  0.4577, -2.9564, -0.2349, -1.3947,  1.3738],
            [-4.2622,  3.2022, -0.0457, -0.4369, -2.4668, -1.2326, -3.9656,  3.6743]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1640, -1.7933,  0.2941,  1.0296,  2.1971,  0.1844, -1.4511, -1.2524,
             -1.2897,  1.3928],
            [-1.6169,  2.3601,  2.0741,  3.8808,  1.5763, -3.1311, -4.0861, -2.9200,
              3.5879,  2.1260],
            [ 2.2113, -0.7621,  0.3370, -3.9457, -1.0028, -4.6710,  0.4570,  3.5047,
              3.5193, -1.8227],
            [-2.5460,  0.1235,  0.3785, -3.1847, -0.2391,  2.0791,  4.7706,  0.5233,
             -0.6378, -1.5122],
            [ 0.3758, -0.3336, -0.7417, -1.4995,  5.0597,  4.2605, -3.1007, -1.8678,
             -0.6665,  0.5246],
            [-0.7929, -3.4367,  2.2758,  1.5226,  3.5519, -2.7227, -4.1710, -0.0713,
              3.7835,  0.6775],
            [-2.0959, -1.9239,  6.4683, -0.2263, -0.1094, -1.7037, -0.8902,  6.6487,
             -2.1156, -2.1968],
            [-1.5654,  3.9036,  2.4996, -3.9018,  1.1060,  0.0205,  1.6333,  1.2055,
             -2.8157,  2.6458],
            [-1.8129,  5.0380, -2.1583,  0.3766,  0.4992,  0.6233,  1.7410, -2.8496,
              0.3040,  0.0235],
            [ 0.9997,  0.5342, -2.5390,  1.7663, -0.6236,  0.1248, -0.5662, -0.6099,
              1.7731, -0.7410]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.071 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

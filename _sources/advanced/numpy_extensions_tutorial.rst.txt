
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[14.4221, 12.3982,  8.4389, 10.6718,  2.4612],
            [ 7.2711,  3.2701,  4.7066, 11.2123, 10.6731],
            [ 2.5180,  7.1100, 14.6230, 16.7972, 11.2669],
            [ 5.3111, 10.7765,  9.0854,  5.6440,  7.3583],
            [ 7.2264,  6.3998,  9.9401, 10.8238,  0.0592],
            [ 5.3111,  7.4426,  9.8473,  8.5185,  7.3583],
            [ 2.5180,  8.7126, 11.0998,  5.5572, 11.2669],
            [ 7.2711,  1.1006,  7.1226,  3.5829, 10.6731]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.6409, -0.7734, -1.5376,  1.7030, -1.0423, -1.1267,  2.1359, -1.1975],
            [ 0.8021,  0.5158, -1.0691, -0.1866,  1.5801,  1.1989, -1.8721, -0.4044],
            [ 0.5516, -1.6927,  0.7581, -0.8939,  0.2492, -0.6595, -0.3576,  0.7842],
            [-1.1597,  0.1087, -1.5496, -1.8740,  0.0436,  0.0863,  2.8248,  0.9733],
            [-0.1551,  0.4980, -1.9070,  0.1021, -0.3821,  0.1800, -2.0359, -1.5984],
            [-0.5586,  0.8446, -1.7042, -0.4079,  0.1558,  0.9126,  0.0097, -0.3593],
            [-0.0547, -0.5212, -2.3342, -0.6785,  0.1621, -0.0964, -0.4735, -0.0710],
            [-0.9276, -0.5843,  0.1616, -0.9865, -0.0414, -1.3938,  2.1064, -0.8429]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3541,  0.4062, -0.3219],
            [-0.1691,  0.5927, -0.7056],
            [-0.4733, -0.0767, -0.2074]], requires_grad=True), Parameter containing:
    tensor([[0.2644]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.6374e-02, -2.6271e+00,  9.8196e-01,  1.9386e+00, -1.3559e+00,
             -1.4242e+00,  2.3635e-01, -3.7980e-01],
            [ 8.7755e-01,  1.8500e-01, -6.9713e-01,  2.0942e+00, -1.7612e+00,
             -3.6691e-01, -6.1288e-02, -1.4308e-01],
            [ 2.1149e+00,  2.0216e-01, -1.1770e+00,  1.8281e+00, -1.1998e-01,
             -1.8411e+00, -6.1349e-01,  1.2265e+00],
            [ 3.3113e+00,  1.2997e-03, -1.2021e+00,  2.4499e+00,  3.0846e+00,
             -1.1462e+00,  1.1214e+00,  2.6671e+00],
            [ 4.9502e-01,  7.8840e-01, -9.9232e-01,  1.2292e+00,  1.8306e-01,
             -1.9847e-01,  5.6251e-01,  2.4072e+00],
            [ 7.6212e-01,  3.3378e-01, -7.0720e-02,  1.7988e+00, -1.4747e-01,
              1.3061e+00, -8.5900e-01,  9.4955e-01],
            [ 1.5594e-02, -3.1963e-01,  7.9032e-01, -8.3795e-01, -2.5561e-01,
              1.8793e-01,  1.1671e-01,  1.6704e+00],
            [ 1.3372e+00,  1.0517e-01,  1.6759e+00, -2.3916e+00,  3.1227e+00,
              1.1999e+00, -1.4289e+00,  1.8137e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2992,  0.2899, -0.0071, -0.8477,  0.8823, -0.8158,  0.0180,  0.3267,
             -0.5061,  0.1789],
            [-0.2356,  0.3595, -0.9039, -0.4277,  1.0524, -1.9648,  0.8482, -0.0881,
             -1.1610,  0.5813],
            [-0.3431, -0.3279,  0.2836,  0.0122, -1.8061,  0.0769, -0.7624, -0.3780,
             -0.4445,  0.5011],
            [-0.2710, -0.8340,  0.0243, -1.5927, -1.2827,  1.4329, -2.5160,  1.1564,
             -0.1752, -0.1034],
            [-0.3074,  0.5651,  0.7708, -1.5862,  0.0805,  1.5706, -2.0651,  1.3357,
             -0.8233, -0.3180],
            [-1.2116,  1.1509, -1.7876, -0.9931,  2.2287, -0.8181, -1.5115,  0.5342,
             -0.7040, -0.0384],
            [-0.6561,  1.1533, -1.0296,  0.8107, -0.3934, -1.6221,  2.6104, -1.6424,
              1.3960, -0.8954],
            [-0.6793, -0.7077,  0.7581,  0.1590, -0.0549,  0.8735,  1.1952, -1.7069,
              2.1660, -1.4607],
            [ 0.3811, -0.9096,  0.4592,  0.1440, -0.3387,  0.3653,  0.2747, -1.1290,
             -0.3066,  0.2479],
            [ 0.3740, -0.1272,  0.0215, -0.0132, -0.3021,  0.0621,  0.0404,  0.5696,
              0.1479,  0.2263]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.028 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

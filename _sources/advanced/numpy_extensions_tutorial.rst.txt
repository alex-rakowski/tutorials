
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 4.2953, 15.7286,  5.0291, 13.9925,  5.1532],
            [ 3.1929,  6.6578, 12.1860,  6.6170,  4.0426],
            [ 2.3159,  5.6151,  2.9364,  5.2737,  4.4938],
            [ 6.3365, 12.0369,  6.0425,  7.2944,  8.6513],
            [ 0.8622, 11.2620,  5.2113,  5.3381,  5.9564],
            [ 6.3365,  9.7767,  1.2956, 13.9636,  8.6513],
            [ 2.3159, 10.2905,  5.7591,  7.4862,  4.4938],
            [ 3.1929,  8.0446,  6.3577, 12.3410,  4.0426]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4336, -0.3673,  0.2441, -1.0959,  0.2056, -0.3784,  1.2352,  1.1800],
            [-0.5874,  0.5214,  1.8279,  0.1950, -0.3361, -0.6927, -1.0731,  2.0220],
            [ 0.3999, -0.8133,  1.7865, -0.3931, -1.0885, -0.8100, -1.3398,  0.0181],
            [-1.6151, -0.5893,  0.2267, -2.2141,  1.1333,  1.2084,  0.8525,  1.5058],
            [ 1.5656,  0.9741,  0.0831, -0.5178, -1.8180,  0.1291,  0.0474,  0.4110],
            [ 0.3779,  0.0569, -1.0711, -1.2154,  0.1304,  0.2322,  2.2976, -0.4093],
            [ 1.2859,  1.4016, -0.2179, -1.4321,  1.7792, -0.7499, -0.0991,  0.5248],
            [-0.0574, -0.4706, -0.0138, -1.0689, -1.0262,  0.7137,  0.0224,  1.6950]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0661, -2.5360, -0.3907],
            [-0.1527,  0.6633,  0.2205],
            [-0.8847, -0.3169,  0.7262]], requires_grad=True), Parameter containing:
    tensor([[2.1831]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.7496,  5.2712,  3.8419,  4.6881,  1.7825,  5.1983, -1.8478, -4.1901],
            [ 7.7560,  5.8266,  5.5523, -0.0661,  4.8551,  1.0198,  3.5587,  1.8237],
            [ 0.4631, -3.3734,  2.8197,  2.2534,  1.2139,  0.0117, -2.9403,  5.0448],
            [ 3.2149,  5.2789,  1.0935,  3.5699,  5.5979,  5.4951, -0.1123, -2.9350],
            [-3.0293,  3.8910,  6.1893, -2.5282, -1.9277,  0.7481,  2.3610,  3.0584],
            [ 3.8564,  4.6737,  2.4500,  6.0999,  5.5416, -0.4430,  3.2349,  2.9009],
            [ 3.5109,  2.8466, -2.9194,  0.9737,  1.3955,  0.1300, -0.3569,  0.2998],
            [ 6.3642, -2.1123,  0.0547, -0.1205,  2.4087, -1.6285,  0.3757,  3.2581]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0206, -0.8338,  1.5475,  3.1611,  3.7195,  1.2766, -3.7515, -2.5615,
             -3.2060, -0.4457],
            [ 0.0252, -2.5030,  0.3917,  0.6418, -1.2173, -0.6838,  1.6446, -0.0943,
              4.1965,  0.7738],
            [-0.5005,  3.5237,  1.3888,  3.3126,  2.3534, -5.1261,  2.0404,  0.9908,
             -3.5740,  0.0730],
            [-0.7222, -4.9674, -3.0403,  0.0504,  1.0586,  3.5016, -2.7457, -1.9324,
              2.6784, -0.4748],
            [ 0.6335, -3.9637, -0.6590,  0.5776, -5.5165,  0.1234,  4.3699, -1.1701,
             -2.9648,  0.3664],
            [-1.9149,  0.8577,  9.1951,  2.4099, -1.0990, -2.7451, -1.2258,  4.5159,
              2.3072, -0.1788],
            [-1.6643, -1.6870, -1.4303,  1.0967, -2.1315,  1.5396, -2.0375, -4.5559,
             -1.7631,  0.5011],
            [ 0.5065,  4.3622,  4.9899,  0.6710,  0.8194,  0.8743, -0.1557,  1.3360,
              0.9881,  0.1959],
            [-0.0475, -0.4191, -0.2267, -2.0302, -1.6493,  0.1229,  0.0605,  0.1210,
             -0.1061,  0.1073],
            [ 0.6394,  1.7746,  1.2899, -0.7475, -1.1807, -0.9527,  0.1718,  1.3303,
             -0.0830, -0.4322]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.080 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.2490,  6.1120,  3.1531,  6.2885,  2.1954],
            [ 6.1787,  5.3816, 10.1835,  5.8331,  8.6245],
            [ 9.1097,  4.6635, 13.7341,  7.0361,  5.7887],
            [ 3.2058,  5.8158, 11.3285,  7.0168,  7.5615],
            [11.5539,  1.2361,  5.3968,  6.0292,  4.3440],
            [ 3.2058,  3.5825, 10.2132, 12.7155,  7.5615],
            [ 9.1097, 10.0680,  9.2678,  5.9473,  5.7887],
            [ 6.1787,  9.6850,  2.5328,  7.0383,  8.6245]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4118,  1.1418, -2.0359, -0.3133,  1.0796,  0.0923,  0.6630, -0.8319],
            [-0.1941, -0.7707, -0.1078,  0.8146,  0.4878,  1.0182, -0.6964,  0.1200],
            [ 1.8054, -1.7732, -0.7173,  0.7981, -0.2656,  0.2591,  0.1561,  0.1468],
            [ 0.4846,  0.5771,  0.1939,  1.7754, -0.9559,  0.7183,  0.6155,  1.7882],
            [-0.4287, -0.0508,  0.5321,  0.5143, -0.2596, -0.2646, -1.4606, -1.4699],
            [ 0.2511,  0.6845, -0.1659, -0.5826,  1.0795, -0.4989, -0.2607, -1.9924],
            [-1.5631, -1.9324,  0.6938,  0.2689, -0.5009, -1.0409,  1.4487,  0.7447],
            [ 0.7331, -0.5932,  1.0770, -0.9708,  0.5800,  1.9412,  0.0421,  0.2089]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0503,  0.2044,  0.5996],
            [ 1.5484, -0.5812, -1.1070],
            [ 0.5878, -0.5355, -0.1643]], requires_grad=True), Parameter containing:
    tensor([[1.0562]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.4446, -1.8880,  3.2659,  0.2688,  1.7040,  0.6010,  1.2455, -0.6694],
            [ 3.2274,  1.9098,  1.2106,  0.4959,  2.5277,  0.2662, -1.3167,  1.7279],
            [-1.2051,  1.1653,  2.4227, -1.9268, -2.4052, -0.5403,  5.6268,  2.0022],
            [-1.1232,  0.9550,  1.3658, -1.4079, -0.6015,  1.4877,  3.7524,  0.8680],
            [ 1.4079,  0.5272,  2.1961,  0.5235,  2.2736,  1.1446,  1.8287, -0.5929],
            [ 3.3585,  0.6276,  0.2350,  1.1493, -2.7401,  0.3402,  1.2171,  2.9576],
            [ 2.6214,  0.1232, -1.3397,  1.6630, -1.1445,  1.0597,  4.3795,  2.0686],
            [ 0.2959,  2.4987, -0.4819,  3.7531,  1.6464, -1.2870,  3.3663, -0.2052]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0313, -0.1861, -0.5661, -0.4842,  0.6151,  0.0480, -0.9759, -1.1466,
             -0.5724,  1.2658],
            [-1.0084, -1.5622,  2.5288,  2.1969, -3.1695, -3.5851, -0.3736,  6.6573,
              0.8352, -2.0991],
            [-1.8090,  1.4944,  0.6315, -3.8168, -0.8790,  3.5606, -0.0494,  1.0163,
             -1.5172, -0.2764],
            [-4.2105,  5.9424,  0.0934, -2.8729,  4.1704, -0.4345, -1.2901,  2.8222,
             -0.2186, -1.8286],
            [ 1.8762,  2.5037, -4.0276, -0.5059,  2.1486, -0.4486, -0.1525, -1.9498,
              0.7180,  0.9155],
            [ 4.3218, -2.8094, -5.9633,  0.5650,  4.3629, -1.3762, -0.7082, -2.5110,
              0.7345,  0.8309],
            [ 0.6782, -3.8407,  1.0274,  7.0847, -1.8864, -5.2455,  5.0765, -1.1396,
             -0.0529,  1.6644],
            [ 3.1226, -1.6687, -2.4781, -1.4193, -1.6953, -0.7935,  4.2072,  2.7387,
             -1.6252, -1.9953],
            [ 1.8199, -5.0500, -0.2755,  1.3794,  0.9160,  2.2017,  2.9659, -1.4565,
             -2.5571, -0.1356],
            [ 0.2099, -1.6835,  1.0501,  0.1892,  0.3194,  0.7911,  0.3678, -0.9446,
             -0.1437,  0.0235]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.125 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

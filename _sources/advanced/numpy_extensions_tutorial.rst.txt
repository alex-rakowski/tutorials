
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.5643,  3.0774,  9.4558, 10.9762,  7.0184],
            [ 4.7775,  7.6318,  7.5141,  9.4928,  8.4814],
            [ 6.9970,  6.5485,  7.7771,  9.2171,  7.3693],
            [ 1.2840,  1.0138,  3.6540, 11.2867,  9.4645],
            [ 8.6320,  4.5720,  2.3438,  4.9762, 12.1174],
            [ 1.2840,  8.3182,  4.3850,  3.6535,  9.4645],
            [ 6.9970, 11.9011,  8.6488,  6.1202,  7.3693],
            [ 4.7775,  6.2431,  8.1977,  6.6298,  8.4814]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.2053,  0.2709,  0.2388,  1.1016,  0.5466,  0.7160,  0.2095, -1.7573],
            [ 1.7069, -0.0667, -1.0524, -0.5864,  0.1353,  0.5015,  0.1058,  0.1706],
            [-0.3009,  1.9508, -1.1871, -1.0214,  0.4925, -1.1505, -1.8864,  1.2546],
            [-1.3175,  1.8276,  0.0896, -0.2550,  1.0593, -0.9358,  0.8958,  0.4350],
            [-0.7597,  1.0335, -1.1469,  1.2088, -0.4479,  0.9194, -1.3986,  0.1508],
            [ 0.0440,  0.2186, -0.7310, -1.0548,  0.7542, -0.4809,  0.3975, -0.9840],
            [-0.3334, -0.7913, -0.5424, -0.9282, -0.9152,  0.4855,  0.8035, -1.7083],
            [-1.3805,  0.8479,  1.0714,  0.2778,  0.2011,  0.1535,  0.5622, -0.0768]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4989, -0.5601,  0.9311],
            [-0.2573, -0.6585, -0.3106],
            [-0.0665,  0.9645, -0.5609]], requires_grad=True), Parameter containing:
    tensor([[-0.8604]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.2318,  0.9277, -2.0821, -1.9571,  1.0111, -1.0250,  1.7824,  2.0941],
            [-4.4819, -0.6771, -1.5341, -2.5253, -1.7504, -1.9850, -2.2409, -2.2838],
            [ 7.0447, -3.4486,  2.0462, -3.8064,  0.9101, -2.0827,  2.0003,  0.5857],
            [-1.2703, -4.2552,  1.3333,  1.1543, -0.9754,  0.7699, -0.4659, -4.3090],
            [-2.0701,  0.8850, -0.1427, -3.3934, -2.5589, -1.0879, -2.5131, -0.7545],
            [-1.9170,  0.6272, -3.8665,  0.0318,  0.1727, -2.9822,  0.8856, -0.9386],
            [-1.8969,  3.9842, -3.2598,  1.0714, -3.4363, -1.5269, -0.8514, -2.5075],
            [-0.0079, -6.3870,  2.5131,  2.1509, -3.3562,  3.8891, -3.8560,  1.2858]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0254,  1.8787, -2.6329,  3.4519, -2.5802, -0.0376, -2.7089,  1.2970,
             -2.0870,  0.6796],
            [ 1.5831, -0.9909,  2.9050, -1.5310, -0.3691,  3.8017, -0.7112,  1.4374,
              1.0548, -1.2601],
            [-1.6801,  0.5808, -2.6618, -1.5013,  0.0387,  1.0681, -2.1443, -0.2867,
              2.1308,  0.5213],
            [ 1.2670, -0.7858, -0.0483,  0.3755,  0.9938, -2.4306,  2.7196, -2.5980,
             -1.6335, -0.6198],
            [-3.1659, -1.4793,  1.5522, -2.2814,  2.7656, -2.3352,  4.4956, -1.4361,
              3.3882, -0.0837],
            [-0.2515,  6.3893, -2.3683,  1.2463,  2.2785,  0.0424,  0.6358, -1.7325,
             -1.2534,  0.6286],
            [ 1.4376, -2.0866, -2.6832, -2.0274,  1.1406, -2.5896, -0.0238,  2.9610,
             -1.0851,  0.5448],
            [-1.2852, -0.3375,  2.8097, -2.2471, -0.4115, -0.0107, -0.0269, -0.5333,
              0.1933,  1.1724],
            [ 0.1391,  1.1384, -0.1839, -1.5040, -0.6300,  4.2992,  0.7555, -0.8182,
             -1.2220, -0.7329],
            [ 0.0495, -0.7394,  0.6815,  0.6691, -1.6364, -0.9844, -0.2822,  2.2459,
              0.4231, -0.7937]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.087 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

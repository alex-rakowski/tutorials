
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 9.8113,  7.6892,  2.0707, 10.6425,  2.9719],
            [10.4411,  6.8112,  4.1254, 16.5561, 10.6463],
            [ 6.9382,  2.6235,  4.9261,  2.3575,  4.3729],
            [10.1036, 19.8759, 14.1916,  2.2021,  5.0034],
            [10.1197,  0.8156, 17.1303, 10.6236,  1.8896],
            [10.1036, 12.2171,  3.7159,  8.0436,  5.0034],
            [ 6.9382,  5.4772,  5.2446,  5.6993,  4.3729],
            [10.4411,  1.7232,  2.3413,  7.9771, 10.6463]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.4566,  1.0142, -0.1462, -1.8428, -0.4441,  0.6315,  0.3956, -0.8646],
            [ 1.9717, -0.7641,  0.1899,  0.9711,  0.2065, -0.7114,  1.4406,  2.3236],
            [ 0.6868,  0.2135,  1.3949,  1.1061, -1.1862,  2.3402, -1.4090, -0.6857],
            [ 1.0146, -0.5014, -0.8119, -0.5061, -0.7441,  0.6621,  0.3592,  1.4758],
            [ 0.5562, -0.8137,  1.2752,  0.4998,  0.3821,  2.5078, -1.0167,  1.3559],
            [-0.8772, -0.4963,  0.5106,  0.6062, -1.9123, -0.3369, -0.0594,  0.1929],
            [ 1.0346,  0.7211, -0.9917, -1.0581,  0.5277, -0.0581,  0.2517,  1.1311],
            [-1.8493, -0.0508,  0.1660,  0.7133,  0.4987, -1.9967, -0.4512, -1.3879]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1802, -0.5435,  0.8103],
            [ 0.5462, -0.2620, -0.2159],
            [ 2.0458,  0.4828,  0.0159]], requires_grad=True), Parameter containing:
    tensor([[0.3089]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9470, -3.8634,  3.4617,  2.2432,  4.7519,  3.7708,  1.0292,  0.0269],
            [-1.0458, -1.6515,  5.3681, -2.1201, -0.3119,  7.5522,  0.2035, -3.3958],
            [ 1.8486, -2.2591, -2.0357,  2.4860, -4.0035, -3.8845, -1.6871, -2.8597],
            [ 1.9825,  0.8001, -2.1159,  2.9330,  1.8600, -3.5176, -1.2688, -0.1705],
            [ 2.8032,  1.4827, -0.9446, -1.8710,  1.0560,  3.6376, -0.7527,  0.8719],
            [ 5.9304, -2.3107,  0.4248,  0.6493, -0.7424,  5.2453, -1.4495,  1.5523],
            [ 4.3992,  0.2299,  0.6613,  2.1500, -2.8163,  0.9116, -1.1400,  0.3074],
            [ 2.1127,  4.3906, -2.6694,  2.9784, -1.3672,  0.7694,  1.3242, -0.1545]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2883,  0.8962, -1.3694, -0.5894,  0.5788, -0.1212,  0.4292, -1.2187,
              1.6064, -0.5015],
            [-1.2284, -0.5494,  2.9814, -1.2048, -0.2030,  1.3291, -0.4052,  0.3517,
             -0.8122, -0.3562],
            [-2.2490, -2.5312,  0.7007,  1.3955,  0.6399, -0.4344,  3.6110, -0.6690,
             -0.3730,  0.0922],
            [ 4.2829, -0.2074, -0.6415,  2.6257, -1.8135, -1.9388, -3.3118, -2.3618,
              1.4815, -0.9810],
            [ 0.1665,  3.5339,  5.7704, -1.0032,  2.5248, -1.2642, -1.6328, -0.6143,
              0.7808,  0.1310],
            [-1.0686, -1.0554,  1.0186, -4.4060, -1.3173, -1.0671,  3.1221, -2.6368,
             -0.8517,  0.1178],
            [ 1.5786, -3.6652, -2.7479, -1.2818, -2.5287,  2.8699,  3.3264,  0.0068,
             -0.4811, -0.3462],
            [-0.5169,  2.0440,  1.9405, -0.8208,  2.7009, -1.3920, -0.9256,  1.6580,
              0.5251, -1.0397],
            [-6.2417, -1.0605, -2.5190,  0.7579,  1.6727, -0.9690, -2.5694, -1.9336,
              0.3119,  0.2938],
            [-1.8916, -3.3185,  0.8988, -0.3428, -0.0885,  1.6533, -1.0171, -3.1619,
             -0.6818, -0.0221]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.048 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

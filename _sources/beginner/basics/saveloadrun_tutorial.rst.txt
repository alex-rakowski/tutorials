
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/saveloadrun_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_saveloadrun_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_saveloadrun_tutorial.py:


`Learn the Basics <intro.html>`_ ||
`Quickstart <quickstart_tutorial.html>`_ ||
`Tensors <tensorqs_tutorial.html>`_ ||
`Datasets & DataLoaders <data_tutorial.html>`_ ||
`Transforms <transforms_tutorial.html>`_ ||
`Build Model <buildmodel_tutorial.html>`_ ||
`Autograd <autogradqs_tutorial.html>`_ ||
`Optimization <optimization_tutorial.html>`_ ||
**Save & Load Model**

Save and Load the Model
============================

In this section we will look at how to persist model state with saving, loading and running model predictions.

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: default


    import torch
    import torchvision.models as models









.. GENERATED FROM PYTHON SOURCE LINES 23-28

Saving and Loading Model Weights
--------------------------------
PyTorch models store the learned parameters in an internal
state dictionary, called ``state_dict``. These can be persisted via the ``torch.save``
method:

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: default


    model = models.vgg16(pretrained=True)
    torch.save(model.state_dict(), 'model_weights.pth')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning:

    The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.

    /opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning:

    Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=VGG16_Weights.IMAGENET1K_V1`. You can also use `weights=VGG16_Weights.DEFAULT` to get the most up-to-date weights.

    Downloading: "https://download.pytorch.org/models/vgg16-397923af.pth" to /var/lib/jenkins/.cache/torch/hub/checkpoints/vgg16-397923af.pth

      0%|          | 0.00/528M [00:00<?, ?B/s]
      0%|          | 2.62M/528M [00:00<00:20, 27.5MB/s]
      1%|          | 5.25M/528M [00:00<00:26, 21.0MB/s]
      1%|1         | 7.50M/528M [00:00<00:24, 22.0MB/s]
      3%|2         | 13.2M/528M [00:00<00:15, 35.6MB/s]
      3%|3         | 18.1M/528M [00:00<00:13, 40.8MB/s]
      4%|4         | 23.6M/528M [00:00<00:11, 46.3MB/s]
      5%|5         | 28.1M/528M [00:00<00:13, 40.2MB/s]
      6%|6         | 32.2M/528M [00:00<00:13, 37.4MB/s]
      7%|7         | 37.0M/528M [00:01<00:12, 40.8MB/s]
      8%|7         | 42.0M/528M [00:01<00:11, 44.1MB/s]
      9%|9         | 48.3M/528M [00:01<00:10, 50.1MB/s]
     10%|#         | 53.2M/528M [00:01<00:10, 46.4MB/s]
     11%|#         | 57.8M/528M [00:01<00:11, 41.4MB/s]
     12%|#1        | 61.9M/528M [00:01<00:12, 39.5MB/s]
     13%|#2        | 66.8M/528M [00:01<00:11, 41.9MB/s]
     13%|#3        | 71.1M/528M [00:01<00:11, 41.3MB/s]
     15%|#4        | 76.7M/528M [00:01<00:10, 45.8MB/s]
     16%|#5        | 82.0M/528M [00:02<00:09, 48.1MB/s]
     16%|#6        | 86.7M/528M [00:02<00:09, 46.4MB/s]
     17%|#7        | 91.1M/528M [00:02<00:10, 45.2MB/s]
     18%|#8        | 95.5M/528M [00:02<00:10, 42.7MB/s]
     19%|#9        | 101M/528M [00:02<00:09, 45.6MB/s] 
     20%|##        | 106M/528M [00:02<00:09, 48.2MB/s]
     21%|##        | 110M/528M [00:02<00:10, 41.6MB/s]
     22%|##1       | 115M/528M [00:02<00:11, 38.6MB/s]
     23%|##2       | 121M/528M [00:03<00:09, 46.2MB/s]
     24%|##3       | 126M/528M [00:03<00:08, 47.7MB/s]
     25%|##4       | 131M/528M [00:03<00:08, 49.8MB/s]
     26%|##5       | 136M/528M [00:03<00:08, 46.1MB/s]
     27%|##6       | 141M/528M [00:03<00:08, 45.7MB/s]
     28%|##7       | 146M/528M [00:03<00:08, 46.6MB/s]
     28%|##8       | 150M/528M [00:03<00:09, 42.7MB/s]
     29%|##9       | 155M/528M [00:03<00:08, 45.6MB/s]
     30%|###       | 160M/528M [00:03<00:08, 42.9MB/s]
     31%|###1      | 164M/528M [00:04<00:09, 42.3MB/s]
     32%|###1      | 168M/528M [00:04<00:09, 41.4MB/s]
     33%|###2      | 172M/528M [00:04<00:10, 37.1MB/s]
     33%|###3      | 176M/528M [00:04<00:10, 36.2MB/s]
     34%|###4      | 181M/528M [00:04<00:09, 38.9MB/s]
     35%|###5      | 186M/528M [00:04<00:08, 42.2MB/s]
     36%|###6      | 191M/528M [00:04<00:07, 46.6MB/s]
     37%|###7      | 196M/528M [00:04<00:07, 47.4MB/s]
     38%|###8      | 201M/528M [00:04<00:06, 50.1MB/s]
     39%|###9      | 206M/528M [00:05<00:07, 47.1MB/s]
     40%|###9      | 211M/528M [00:05<00:07, 44.3MB/s]
     41%|####      | 215M/528M [00:05<00:08, 39.9MB/s]
     41%|####1     | 219M/528M [00:05<00:08, 37.2MB/s]
     42%|####2     | 224M/528M [00:05<00:07, 40.2MB/s]
     43%|####3     | 229M/528M [00:05<00:07, 44.0MB/s]
     45%|####4     | 235M/528M [00:05<00:06, 50.7MB/s]
     46%|####5     | 240M/528M [00:05<00:05, 50.5MB/s]
     46%|####6     | 245M/528M [00:05<00:06, 48.1MB/s]
     47%|####7     | 251M/528M [00:06<00:05, 50.6MB/s]
     48%|####8     | 256M/528M [00:06<00:06, 44.5MB/s]
     49%|####9     | 260M/528M [00:06<00:06, 45.0MB/s]
     50%|#####     | 266M/528M [00:06<00:05, 48.8MB/s]
     51%|#####1    | 270M/528M [00:06<00:05, 46.2MB/s]
     52%|#####2    | 275M/528M [00:06<00:05, 46.7MB/s]
     53%|#####3    | 280M/528M [00:06<00:05, 47.7MB/s]
     54%|#####3    | 285M/528M [00:06<00:05, 44.1MB/s]
     55%|#####5    | 291M/528M [00:06<00:05, 49.2MB/s]
     56%|#####6    | 296M/528M [00:07<00:05, 48.6MB/s]
     57%|#####6    | 300M/528M [00:07<00:06, 37.1MB/s]
     58%|#####7    | 304M/528M [00:07<00:06, 38.4MB/s]
     59%|#####8    | 309M/528M [00:07<00:05, 40.9MB/s]
     59%|#####9    | 313M/528M [00:07<00:06, 33.0MB/s]
     60%|######    | 317M/528M [00:07<00:07, 30.8MB/s]
     61%|######    | 320M/528M [00:07<00:07, 27.9MB/s]
     61%|######1   | 323M/528M [00:08<00:07, 27.5MB/s]
     62%|######1   | 326M/528M [00:08<00:07, 29.3MB/s]
     62%|######2   | 330M/528M [00:08<00:06, 30.2MB/s]
     63%|######3   | 335M/528M [00:08<00:05, 36.1MB/s]
     64%|######4   | 340M/528M [00:08<00:04, 40.7MB/s]
     65%|######5   | 344M/528M [00:08<00:04, 42.7MB/s]
     66%|######6   | 348M/528M [00:08<00:04, 39.2MB/s]
     67%|######6   | 352M/528M [00:08<00:05, 35.8MB/s]
     68%|######7   | 357M/528M [00:08<00:04, 38.1MB/s]
     68%|######8   | 361M/528M [00:09<00:04, 41.5MB/s]
     69%|######9   | 366M/528M [00:09<00:04, 35.2MB/s]
     70%|######9   | 369M/528M [00:09<00:05, 28.2MB/s]
     71%|#######   | 374M/528M [00:09<00:04, 32.8MB/s]
     72%|#######1  | 377M/528M [00:09<00:04, 32.3MB/s]
     72%|#######2  | 382M/528M [00:09<00:04, 36.3MB/s]
     73%|#######3  | 386M/528M [00:09<00:04, 35.8MB/s]
     74%|#######4  | 391M/528M [00:09<00:03, 39.0MB/s]
     75%|#######4  | 395M/528M [00:10<00:03, 41.2MB/s]
     76%|#######5  | 399M/528M [00:10<00:03, 38.4MB/s]
     76%|#######6  | 404M/528M [00:10<00:03, 39.9MB/s]
     77%|#######7  | 408M/528M [00:10<00:02, 41.9MB/s]
     78%|#######8  | 414M/528M [00:10<00:02, 47.5MB/s]
     79%|#######9  | 419M/528M [00:10<00:02, 46.0MB/s]
     80%|########  | 423M/528M [00:10<00:02, 42.0MB/s]
     81%|########  | 427M/528M [00:10<00:02, 37.0MB/s]
     82%|########1 | 432M/528M [00:11<00:02, 38.8MB/s]
     83%|########2 | 436M/528M [00:11<00:02, 39.9MB/s]
     83%|########3 | 440M/528M [00:11<00:02, 39.6MB/s]
     84%|########4 | 445M/528M [00:11<00:01, 45.5MB/s]
     85%|########5 | 450M/528M [00:11<00:01, 43.5MB/s]
     86%|########6 | 455M/528M [00:11<00:01, 44.2MB/s]
     87%|########6 | 459M/528M [00:11<00:01, 43.2MB/s]
     88%|########7 | 463M/528M [00:11<00:01, 40.2MB/s]
     89%|########8 | 467M/528M [00:11<00:01, 41.1MB/s]
     89%|########9 | 471M/528M [00:12<00:01, 40.5MB/s]
     90%|######### | 475M/528M [00:12<00:01, 39.3MB/s]
     91%|######### | 480M/528M [00:12<00:01, 41.3MB/s]
     92%|#########1| 485M/528M [00:12<00:01, 44.0MB/s]
     93%|#########2| 489M/528M [00:12<00:00, 43.7MB/s]
     93%|#########3| 493M/528M [00:12<00:00, 42.2MB/s]
     94%|#########4| 497M/528M [00:12<00:00, 38.6MB/s]
     95%|#########4| 501M/528M [00:12<00:00, 39.0MB/s]
     96%|#########5| 506M/528M [00:12<00:00, 41.1MB/s]
     97%|#########6| 510M/528M [00:12<00:00, 43.9MB/s]
     98%|#########7| 515M/528M [00:13<00:00, 44.8MB/s]
     99%|#########8| 520M/528M [00:13<00:00, 48.6MB/s]
    100%|#########9| 526M/528M [00:13<00:00, 50.7MB/s]
    100%|##########| 528M/528M [00:13<00:00, 41.5MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 33-35

To load model weights, you need to create an instance of the same model first, and then load the parameters
using ``load_state_dict()`` method.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default


    model = models.vgg16() # we do not specify pretrained=True, i.e. do not load default weights
    model.load_state_dict(torch.load('model_weights.pth'))
    model.eval()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    VGG(
      (features): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): ReLU(inplace=True)
        (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (6): ReLU(inplace=True)
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (8): ReLU(inplace=True)
        (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): ReLU(inplace=True)
        (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): ReLU(inplace=True)
        (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (18): ReLU(inplace=True)
        (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (20): ReLU(inplace=True)
        (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (22): ReLU(inplace=True)
        (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (25): ReLU(inplace=True)
        (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (27): ReLU(inplace=True)
        (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (29): ReLU(inplace=True)
        (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
      (classifier): Sequential(
        (0): Linear(in_features=25088, out_features=4096, bias=True)
        (1): ReLU(inplace=True)
        (2): Dropout(p=0.5, inplace=False)
        (3): Linear(in_features=4096, out_features=4096, bias=True)
        (4): ReLU(inplace=True)
        (5): Dropout(p=0.5, inplace=False)
        (6): Linear(in_features=4096, out_features=1000, bias=True)
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 41-42

.. note:: be sure to call ``model.eval()`` method before inferencing to set the dropout and batch normalization layers to evaluation mode. Failing to do this will yield inconsistent inference results.

.. GENERATED FROM PYTHON SOURCE LINES 44-49

Saving and Loading Models with Shapes
-------------------------------------
When loading model weights, we needed to instantiate the model class first, because the class
defines the structure of a network. We might want to save the structure of this class together with
the model, in which case we can pass ``model`` (and not ``model.state_dict()``) to the saving function:

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    torch.save(model, 'model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We can then load the model like this:

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default


    model = torch.load('model.pth')








.. GENERATED FROM PYTHON SOURCE LINES 58-59

.. note:: This approach uses Python `pickle <https://docs.python.org/3/library/pickle.html>`_ module when serializing the model, thus it relies on the actual class definition to be available when loading the model.

.. GENERATED FROM PYTHON SOURCE LINES 61-64

Related Tutorials
-----------------
`Saving and Loading a General Checkpoint in PyTorch <https://pytorch.org/tutorials/recipes/recipes/saving_and_loading_a_general_checkpoint.html>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.485 seconds)


.. _sphx_glr_download_beginner_basics_saveloadrun_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: saveloadrun_tutorial.py <saveloadrun_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: saveloadrun_tutorial.ipynb <saveloadrun_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
